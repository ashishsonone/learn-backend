setup
    started 2 workers
    in master listen on 'exit' and 'disconnect' events
    in master on receiving SIGHUP(1) signal, make the first worker to disconnect()
    in worker use express to listen on '/', wait for 10 seconds before giving response
        so that we know that how many requests are pending before disconnecting the worker
    run $ siege -c 10 -t30 localhost:8003/ to  bombard with requests
    run $ kill -1 <master pid>
    run $ siege -c 10 -t30 localhost:8003/  in another terminal to bombard another set of requests (to test whether first worker still recevies requests)

log:

#M pid=25548 <---- master started
#1: pid=25553 <---- worker[1] started
#2: pid=25558 <---- worker[2] started
#2: 1|0 <---- siege-1 first round started to make 10 concurrent requests
#1: 1|0
#2: 2|0
#1: 2|0
#2: 3|0
#2: 4|0
#1: 3|0
#1: 4|0 <---- worker[1] has 4 pending requests
#2: 5|0
#2: 6|0 <---- worker[2] has 6 pending requests
[ '1', '2' ] <---- kill -1 25548 called, worker[1].disconnect called from master
#M stoppping worker 1
#2: 7|0 <---- second siege called to test if worker[1] accepts any new connections
#2: 8|0
#2: 9|0
#2: 10|0
#2: 11|0
#2: 12|0
#2: 13|0
#2: 14|0
#2: 15|0
#2: 16|0  <---- from the point of worker[1].disconnect called, all subsequent 10 requests from first round of siege-2 are received by worker[2]
#2: 16|1  <---- worker[2] starts replying
#2: 16|2
#2: 16|3
#2: 16|4
#2: 16|5
#2: 16|6
#1: 4|1  <---- worker[1] starts replying
#1: 4|2
#1: 4|3
#1: 4|4 <---- worker[1] responded to all requests. It waited for all connections to close before 'disconnecting' itself
#1: disconnect <---- worker[1] disconnected
#M worker #1 disconnected <---- master received 'disconnect' event of worker
#2: 17|6
#2: 18|6
#M suidice attempt of #1, code=0, signal=null  <---- master receives a message that
                                                      worker[1] does the suicide and gracefully exited
                                                      after serving all pending requests after 10 seconds
#2: 19|6
#2: 20|6
#2: 21|6
#2: 22|6
#2: 23|6
#2: 24|6
#2: 25|6
#2: 26|6
#2: 26|7
#2: 26|8 <---- worker[2] keeps processing requests as usual after worker[1] has exited

Yay so its safe to call worker.disconnect() from master without worrying about pending requests (say N pending requests)
and also it will not receive any further requests. So after processing those N requests (say within 60s max),
it will disconnect and exit gracefully. Now another worker can be forker in master as master will received the 
'exit' with suicide event corresponding to this exited worker.
